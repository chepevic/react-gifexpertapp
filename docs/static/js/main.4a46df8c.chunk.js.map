{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GiftGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GiftGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAZS,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBR,GAAY,SAAAS,GAAI,OAAGP,GAAH,mBAAkBO,OAClCN,EAAc,MAOd,SACG,uBACCO,KAAK,OACLC,MAAOT,EACPU,SApBgB,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DACXC,EADW,yCAC2BC,UAAUH,GADrC,+DAEKI,MAAM,WAAD,OAAYF,IAFtB,cAEXG,EAFW,gBAGGA,EAASC,OAHZ,uBAGVC,EAHU,EAGVA,KAEDC,EAAKD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACrB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATxB,kBAYZM,GAZY,4CAAD,sDCEPO,EAAe,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACrC,OAEQ,sBAAcc,UAAU,iDAAxB,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,6BAAKA,MAFCD,ICETQ,EAAW,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEtB,ECNsB,SAACA,GACvB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAZAC,qBAAU,WACPxB,EAAQC,GACPwB,MAAK,SAAAC,GAAI,OACLH,EACI,CACIf,KAAKkB,EACLL,SAAQ,SAIrB,CAACpB,IAEGqB,EDXsBK,CAAa1B,GAA9Ba,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAGpB,OACI,qCACI,6BAAKpB,IACJoB,GAAS,2CAEd,qBAAKJ,UAAU,YAAf,SAEYH,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEajBgB,EA5BI,WAEf,MAAkCzC,mBAAS,CAAC,cAA5C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAMA,OACI,qCACA,6CACA,cAAC,EAAD,CAAaA,YAAeA,IAC3B,uBAEI,6BAEQ2C,EAAWnB,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MClB7B6B,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.4a46df8c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategory}) => {\n    const [inputValue, setInputValue] = useState('')\n    const handleINputChange=(e)=>{\n        setInputValue(e.target.value);\n\n    }\n    const handleSubmit=(e)=>{\n    e.preventDefault();\n\n    if(inputValue.trim().length>2){\n        setCategory(cats=>[inputValue, ...cats])\n        setInputValue('')\n\n    }\n\n\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n           <input \n            type=\"text\" \n            value={inputValue}\n            onChange={handleINputChange}\n            \n            />\n        </form>\n    )\n   \n}\nAddCategory.propTypes={\n    setCategory:PropTypes.func.isRequired\n}","export const getGifs=async(category)=>{\n    const url=`api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=5wbaw16xW4g97wD3GTfNnFFwWj5yE19C`;\n    const response= await fetch(`https://${url}`);\n    const {data}= await response.json()\n    \n    const gifs=data.map(img=>{\n        return{\n            id:img.id,\n            title:img.title,\n            url:img.images?.downsized_medium.url\n        }\n    })\n  return gifs;\n   \n\n}","import React from 'react'\n\nexport const GiftGridItem = ({id, title, url}) => {\n    return (\n        \n            <div key={id} className=\"card animate__animated animate__bounce animate\">\n                <img src={url} alt={title} />\n                <h2>{title}</h2>\n            </div>\n    )\n}\n","//import React,{useState, useEffect} from 'react'\n//import { getGifs } from '../helpers/getGifs'\nimport React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifts'\nimport { GiftGridItem } from './GiftGridItem'\n\n\nexport const GiftGrid = ({category}) => {\n\n    const {data:images, loading}=useFetchGifs(category);\n\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading&&<p>Loading...</p>}\n        \n        <div className=\"card-grid\">\n                {\n                    images.map(img=>\n                       <GiftGridItem \n                       key={img.id}\n                       {...img} />\n                \n                        )\n                }\n        </div>\n        \n        </>\n    )\n}\n","import {useState, useEffect} from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs=(category)=>{\n    const [state, setstate] = useState({\n        data:[],\n        loading:true\n    })\n    useEffect(()=>{\n       getGifs(category)\n       .then(imgs=> \n            setstate(\n                {\n                    data:imgs,\n                    loading:false\n                }\n            )\n        )\n     },[category])\n\n    return state; //{data:[], loading:true}\n}","import React,{useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GiftGrid } from './components/GiftGrid';\n\n\n\nconst GifExpertApp=()=>{\n    //const categories=['Once Puch', 'Sumaria X','Dragon Ball'];\n    const [categories, setCategory] = useState(['Once Puch']);\n   /* const handleAdd=()=>{\n        setCategory([...categories,'HunterXHunter']);\n\n    }*/\n\n    return(\n        <>\n        <h2>Gift Expert</h2>\n        <AddCategory setCategory = {setCategory}/>\n         <hr/>\n       \n             <ul>\n                 {\n                     categories.map((category)=>\n                        <GiftGrid \n                        key={category}\n                        category={category} />\n                     )\n                 }   \n             </ul>\n         \n        </>\n    )\n\n}\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}